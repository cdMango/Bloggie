@page "/blog/{urlHandle}"
@using Microsoft.AspNetCore.Identity
@model Bloggie.Web.Pages.Blog.Details
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> signInManager

@{
    ViewData["Title"] = Model.BlogPost.PageTitle; 
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            @if (Model.BlogPost != null)
            {
                <h1 class="mb-3">@Model.BlogPost.Heading</h1>
                
                <div class="d-flex justify-content-between">
                    <span>@Model.BlogPost.Author</span>
                    <span>@Model.BlogPost.PublishedDateTime.ToShortDateString()</span>
                </div>
                
                <div class="mb-3">
                    <span>
                        @if (signInManager.IsSignedIn(User))
                        {
                            @if (Model.Liked)
                            {
                                <a style="cursor : pointer"><i class="bi bi-hand-thumbs-up-fill"></i></a>

                            }
                            else
                            {
                                <a id="btnLike" style="cursor : pointer"><i class="bi bi-hand-thumbs-up"></i></a>
                            }
                        } 
                        <span id="totalLikes">@Model.TotalLikes</span> likes

                    </span>
                </div>
                
                <div class="mb-3">
                    @if (Model.BlogPost.Tags != null)
                    {
                        foreach (var tag in Model.BlogPost.Tags)
                        {
                            <a href="/tags/@tag.Name">
                                <span class="badge bg-dark">@tag.Name</span>
                            </a>
                        }
                    }
                </div>
                
                <div class="mb-3 blog-details">
                    <img src="@Model.BlogPost.FeaturedImageURL" class="d-block image-fluid mb-3"/>
                    @Html.Raw(Model.BlogPost.Content)
                </div>
            }
            else
            {
                <h2>Blog post not found</h2>
            }
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        const btnLike = document.getElementById('btnLike'); 
        const totalLikesElement = document.getElementById('totalLikes'); 
        async function getTotalLikes(){
            fetch('/api/blogpostlike/@Model.BlogPost.Id/totallikes', {
            method: 'GET', 
            headers: {
                'Content-type': 'application/json', 
                'Accept': '*/*' 
            }, 
        })
            .then(data => data.json())
            .then(result => totalLikesElement.innerHTML = result); 
        }
        async function addLikeForBlog() {
            
            fetch('/api/blogpostlike/add', {
                method: 'POST', 
                headers: {
                    'Content-Type': 'application/json', 
                    'Accept': '*/*' 
                },
                body: JSON.stringify({ blogPostId : '@Model.BlogPost.Id', userId : '@UserManager.GetUserId(User)'})
            })
                .then(() => { 
                    btnLike.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>'; 
                    btnLike.removeEventListener('click', addLikeForBlog); 
                    getTotalLikes(); 
                }); 
                
        }
        
        btnLike.addEventListener('click', addLikeForBlog)
    </script>
}


